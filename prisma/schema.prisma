generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Chain {
  id         String   @id @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  standardId Int
  Block      Block[]
  Token      Token[]
}

model Block {
  id           String        @id @db.Uuid
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  chain        Chain         @relation(fields: [chainId], references: [id])
  chainId      String        @db.Uuid
  number       Int
  hash         String
  timestamp    Int
  transactions Transaction[]
  Log          Log[]
}

model Transaction {
  id        String     @id @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  block     Block      @relation(fields: [blockId], references: [id])
  blockId   String     @db.Uuid
  hash      String
  index     Int
  from      String
  to        String
  logs      Log[]
  transfers Transfer[]
}

model Log {
  id            String      @id @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  block         Block       @relation(fields: [blockId], references: [id])
  blockId       String      @db.Uuid
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @db.Uuid
  index         Int
  address       String
  topic0        String?
  topic1        String?
  topic2        String?
  topic3        String?
  data          String
}

model Transfer {
  id            String      @id @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @db.Uuid
  token         Token?      @relation(fields: [tokenId], references: [id])
  tokenId       String?     @unique @db.Uuid
  instance      Instance?   @relation(fields: [instanceId], references: [id])
  instanceId    String?     @db.Uuid
  fromAddress   String
  toAddress     String
  amount        BigInt
}

model Token {
  id                   String     @id @db.Uuid
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  chain                Chain      @relation(fields: [chainId], references: [id])
  chainId              String     @db.Uuid
  address              String
  type                 String?
  name                 String?
  symbol               String?
  decimals             Int?
  totalSupply          BigInt?
  totalSupplyUpdatedAt DateTime?
  instances            Instance[]
  transfers            Transfer?
  balances             Balance[]
}

model Instance {
  id                String     @id @db.Uuid
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  token             Token      @relation(fields: [tokenId], references: [id])
  tokenId           String     @unique @db.Uuid
  index             BigInt
  ownerAddress      String
  uri               String?
  uriUpdatedAt      DateTime?
  metadata          String?
  metadataUpdatedAt DateTime?
  transfer          Transfer[]
  balances          Balance[]
}

model Balance {
  id           String   @id @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  token        Token    @relation(fields: [tokenId], references: [id])
  tokenId      String   @db.Uuid
  instance     Instance @relation(fields: [instanceId], references: [id])
  instanceId   String   @db.Uuid
  ownerAddress String
  amount       BigInt
}
